

# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../googletest

# Points to the location of the Google Test libraries
GTEST_LIB_DIR = .

# Where to find user code.
SRC_DIR = ../src

# Where to find user tests.
TESTS_DIR = ../tests

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
#CXXFLAGS += -g -Wall -Wextra -pthread -std=c++11
CXXFLAGS += -g -pthread 

# Google Test libraries
GTEST_LIBS = libgtest.a libgtest_main.a

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
#TESTS = sample1_unittest
# add new tests here
TESTS = token_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

#all : $(GTEST_LIBS) $(TESTS)
#main: compiler.bin
	
clean :
	rm -f $(GTEST_LIBS) $(TESTS) *.o *.bin

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

libgtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

libgtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.



#util_unittest : util.o util_unittest.o $(GTEST_LIBS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L$(GTEST_LIB_DIR) -lgtest_main -lpthread $^ -o $@


# util
util.o: $(SRC_DIR)/util.cc
	$(CXX) -c $(SRC_DIR)/util.cc -o util.o

util_unittest.o: $(GTEST_HEADERS) $(TESTS_DIR)/util_unittest.cc
	$(CXX) $(CPPFLAGS) -c $(TESTS_DIR)/util_unittest.cc -o util_unittest.o

util_unittest: $(GTEST_LIBS) util.o util_unittest.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L$(GTEST_LIB_DIR) -lgtest_main -lpthread $^ -o $@
# /util


# token
token.o: $(SRC_DIR)/token.cc
	$(CXX) -c $(SRC_DIR)/token.cc -o token.o

token_unittest.o: $(GTEST_HEADERS) $(TESTS_DIR)/token_unittest.cc token.o
	$(CXX) $(CPPFLAGS) -c $(TESTS_DIR)/token_unittest.cc -o token_unittest.o

token_unittest: $(GTEST_LIBS) token.o token_unittest.o 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L$(GTEST_LIB_DIR) -lgtest_main -lpthread $^ -o $@

# /token


# lex
lex.o:  $(SRC_DIR)/lex.cc util.o token.o
	$(CXX) -c $(SRC_DIR)/lex.cc -o lex.o

lex_unittest.o: $(GTEST_HEADERS) $(TESTS_DIR)/lex_unittest.cc lex.o
	$(CXX) $(CPPFLAGS) -c $(TESTS_DIR)/lex_unittest.cc -o lex_unittest.o

lex_unittest: $(GTEST_LIBS) lex_unittest.o lex.o token.o util.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L$(GTEST_LIB_DIR) -lgtest_main -lpthread $^ -o $@
	
# /lex

# grammar

grammar.o: $(SRC_DIR)/grammar.cc util.o token.o
	$(CXX) -c $(SRC_DIR)/grammar.cc -o grammar.o

grammar_unittest.o: $(TESTS_DIR)/grammar_unittest.cc grammar.o
	$(CXX) $(CPPFLAGS) -c $(TESTS_DIR)/grammar_unittest.cc -o grammar_unittest.o

grammar_unittest: $(GTEST_LIBS) grammar_unittest.o grammar.o util.o token.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L$(GTEST_LIB_DIR) -lgtest_main -lpthread $^ -o $@
	
# /grammar

# parser
parser.o: $(SRC_DIR)/parser.cc token.o grammar.o 
	$(CXX) -c $(SRC_DIR)/parser.cc -o parser.o

parser_unittest.o: $(TESTS_DIR)/parser_unittest.cc parser.o token.o grammar.o lex.o
	$(CXX) $(CPPFLAGS) -c $(TESTS_DIR)/parser_unittest.cc -o parser_unittest.o

parser_unittest: $(GTEST_LIBS) parser_unittest.o parser.o token.o grammar.o lex.o util.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L$(GTEST_LIB_DIR) -lgtest_main -lpthread $^ -o $@
# /parser

# main
main.o: $(SRC_DIR)/main.cc lex.o parser.o grammar.o token.o util.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/main.cc -o $@

main: lex.o parser.o grammar.o token.o util.o main.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

